# -*- coding: utf-8 -*-
"""
Created on Sat Jun 22 20:46:26 2024

@author: anike
"""



from  itertools import *
import itertools


#count()

for i in count (10,2):
    if i==30:
        break
    print(i)
    


counter=count()
print(next(counter))
print(next(counter))

'''
0
1

'''


counter=count(4)
print(next(counter))
print(next(counter))

'''
4
5

'''

counter = itertools.count(start=5)
for _ in range(10):
    print(next(counter))
'''
5
6
7
8
9
10
11
12
13
14

'''
    
counter = itertools.count(step=2)
for _ in range(10):
    print(next(counter))
    
'''
0
2
4
6
8
10
12
14
16
18

'''

counter = itertools.count(start=10, step=-1)
for _ in range(10):
    print(next(counter))

'''
10
9
8
7
6
5
4
3
2
1
'''

counter = itertools.count(start=10, step=-2)
for _ in range(10):
    print(next(counter))
'''
10
8
6
4
2
0
-2
-4
-6
-8

'''

counter = itertools.count()
squares = [x**2 for x in itertools.islice(counter, 10)]
print(squares)

#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]


counter = itertools.count()
for value in counter:
    if value > 15:
        break
    print(value)

'''
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
'''


#---------------------------------------------------------

#cycle

counter=0
info=("aniket","rushi","akash")
for i in cycle(info):
    if counter > 10:
        break
    print(i)
    counter+=1
    
'''
aniket
rushi
akash
aniket
rushi
akash
aniket
rushi
akash
aniket
rushi
'''

numbers = [1, 2, 3]
cycled_numbers = itertools.cycle(numbers)

# Print the first 10 elements of the cycle
for _ in range(10):
    print(next(cycled_numbers))

'''
1
2
3
1
2
3
1
2
3
1

'''


tuples = [(1,'a'), (2, 'b'), (3, 'c')]
cycled_tuples = itertools.cycle(tuples)

# Print the first 10 elements of the cycle
for _ in range(10):
    print(next(cycled_tuples))
    
'''
(1, 'a')
(2, 'b')
(3, 'c')
(1, 'a')
(2, 'b')
(3, 'c')
(1, 'a')
(2, 'b')
(3, 'c')
(1, 'a')

'''
string="my name is aniket"
itertool_str=itertools.cycle(string)
for _ in range(10):
    print(itertool_str)
    
import itertools

characters = 'ABC'
cycled_characters = itertools.cycle(characters)
# Print the first 10 elements of the cycle
for _ in range(10):
    print(next(cycled_characters))


items = ['apple', 'banana', 'cherry']
cycled_items = itertools.cycle(items)

# Print elements of the cycle until a condition is met
for i, item in enumerate(cycled_items):
    if i >= 10:  # Break after 10 iterations
        break
    print(item)

#---------------------------------------------------------------
#repeat
from itertools import repeat

for msg in repeat("hii",times=4):
    print(msg)

'''
hii
hii
hii
hii
'''

print(list(repeat("aniket",times=5)))

'''
['aniket', 'aniket', 'aniket', 'aniket', 'aniket']
'''


repeated_lists = itertools.repeat([1, 2, 3], 2)
print(list(repeated_lists))

'''
[[1, 2, 3], [1, 2, 3]]

'''


#---------------------------------------------------------------------
    
from itertools import product

#cartesian product

print(list(product("abc",[1,2,3])))

'''
[('a', 1), ('a', 2), ('a', 3),
 ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2),
 ('c', 3)]

'''

a=["a","b"]
b=[1,2]
print(list(product(a,b)))
'''
[('a', 1), ('a', 2), ('b', 1), ('b', 2)]

'''


a=["a","b"]
b=[1,2]
news=list(itertools.product(a,b))
print(news)


'''
[('a', 1), ('a', 2), ('b', 1), ('b', 2)]

'''

#---------------------------------------------------------------------


#permutation

from itertools import permutations



print(list(itertools.permutations("ABC",2)))

'''
[('A', 'B'), ('A', 'C'), ('B', 'A'),
 ('B', 'C'), ('C', 'A'), ('C', 'B')]

'''



numbers = [1, 2, 3]
perms = list(itertools.permutations(numbers))
print(perms)


'''
[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
'''



data = ['A', 'B', 'C']
perms = list(itertools.permutations(data, 2))
print(perms)


'''

[('A', 'B'), ('A', 'C'), ('B', 'A'), 
 ('B', 'C'), ('C', 'A'), ('C', 'B')]

'''

#---------------------------------------------------------------------

#combination

from itertools import combinations
from combinations import itertools

data = ['A', 'B', 'C']
perms = list(itertools.combinations(data, 2))
print(perms)



'''
[('A', 'B'), ('A', 'C'), ('B', 'C')]
'''



print(list(combinations('ABCDE', 3)))

'''

[('A', 'B', 'C'), ('A', 'B', 'D'), ('A', 'B', 'E'),
 ('A', 'C', 'D'), ('A', 'C', 'E'), ('A', 'D', 'E'), 
 ('B', 'C', 'D'), ('B', 'C', 'E'), ('B', 'D', 'E'), 
 ('C', 'D', 'E')]

'''


# Combinations of a List
print(list(combinations([1, 2, 3, 4], 2)))

# Combinations of a String
print(list(combinations('ABCDE', 3)))

# Combinations of a Tuple
print(list(combinations((10, 20, 30), 1)))

# Combinations with Repeated Elements
print(list(combinations([1, 2, 2, 3], 2)))

# Combinations of a Set
print(list(combinations({5, 6, 7}, 2)))




lst=[1,2,3,4,5]
print([result for result in combinations(lst, 3) if sum(result)==10])

'''
[(1, 4, 5), (2, 3, 5)]

'''


#------------------------------------------------------------------------

#zip

list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
zipped = zip(list1, list2)
print(list(zipped)) 
 
#[(1, 'a'), (2, 'b'), (3, 'c')]



list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
for i,n in zip(list1,list2):
    print(i,n)

'''
1 a
2 b
3 c

'''
    
list1 = [1, 2, 3]
for i in zip(list1):
    print(i)
    
'''
(1,)
(2,)
(3,)

'''

#------------------------------------------------------


#zip_longest()

#using zip fun we can access both list but sum time list element is not equal
#that time zip fun can not take element

from itertools import zip_longest



list1 = [1, 2, 3]
list2 = ['a', 'b']

result = list(zip_longest(list1, list2))
print(result)  

#  [(1, 'a'), (2, 'b'), (3, None)]




list1 = [1, 2]
list2 = ['a', 'b', 'c']
list3 = [True, False, True, False]

result = list(zip_longest(list1, list2, list3))
print(result)  

#[(1, 'a', True), (2, 'b', False), (None, 'c', True), (None, None, False)]



list1 = []
list2 = ['a', 'b', 'c']

result = list(zip_longest(list1, list2))
print(result) 

 # [(None, 'a'), (None, 'b'), (None, 'c')]


#--------------------------------------------------------------------------

#all():
    #if all value is true the it return
    
    
    
iter1 = [True, True, True]
iter2 = [True, True]

combined_iter = itertools.chain(iter1, iter2)
result = all(combined_iter)
print(result) 

 # Output: True




repeated_iter = itertools.repeat(True, 5)
result = all(repeated_iter)
print(result)  

# Output: True



iterable = [True, True, False]
cycled_iter = itertools.islice(itertools.cycle(iterable), 3)
result = all(cycled_iter)
print(result)  

# Output: False


#--------------------------------------------------------------------------

#chain(): it combine two or more list,tuple,Different Types of Iterables,Different Lengths

from itertools import chain

list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3=   [7,8,9]
combined = list(chain(list1, list2,list3))
print(combined)

#[1, 2, 3, 4, 5, 6, 7, 8, 9]



list1 = [1, 2]
list2 = [3, 4, 5]
list3 = [6]
combined = list(chain(list1, list2, list3))
print(combined)


#[1, 2, 3, 4, 5, 6]




list1 = [1, 2, 3]
tuple1 = (4, 5, 6)
set1 = {7, 8, 9}
combined = list(chain(list1, tuple1, set1))
print(combined)

#[1, 2, 3, 4, 5, 6, 8, 9, 7]
